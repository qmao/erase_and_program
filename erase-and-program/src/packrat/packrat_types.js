//
// Autogenerated by Thrift Compiler (0.15.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


InfoType = {
  'PACKRAT_ID' : 1,
  'UUID' : 2,
  'QA_STATUS' : 3,
  'QA_WAIVER' : 4,
  'QA_ISSUE' : 5,
  'SOURCE_STATUS' : 6,
  'TRACEABILITY_TAG' : 7,
  'HEX_FILE' : 8,
  'CHECKSUM' : 9
};
NoSuchPackrat = function(args) {
  this.packrat_id = null;
  if (args) {
    if (args.packrat_id !== undefined && args.packrat_id !== null) {
      this.packrat_id = args.packrat_id;
    }
  }
};
Thrift.inherits(NoSuchPackrat, Thrift.TException);
NoSuchPackrat.prototype.name = 'NoSuchPackrat';
NoSuchPackrat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packrat_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchPackrat.prototype.write = function(output) {
  output.writeStructBegin('NoSuchPackrat');
  if (this.packrat_id !== null && this.packrat_id !== undefined) {
    output.writeFieldBegin('packrat_id', Thrift.Type.I32, 1);
    output.writeI32(this.packrat_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotImplemented = function(args) {
  this.function_name = null;
  if (args) {
    if (args.function_name !== undefined && args.function_name !== null) {
      this.function_name = args.function_name;
    }
  }
};
Thrift.inherits(NotImplemented, Thrift.TException);
NotImplemented.prototype.name = 'NotImplemented';
NotImplemented.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.function_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotImplemented.prototype.write = function(output) {
  output.writeStructBegin('NotImplemented');
  if (this.function_name !== null && this.function_name !== undefined) {
    output.writeFieldBegin('function_name', Thrift.Type.STRING, 1);
    output.writeString(this.function_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoginException = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(LoginException, Thrift.TException);
LoginException.prototype.name = 'LoginException';
LoginException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginException.prototype.write = function(output) {
  output.writeStructBegin('LoginException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchFile = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchFile, Thrift.TException);
NoSuchFile.prototype.name = 'NoSuchFile';
NoSuchFile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchFile.prototype.write = function(output) {
  output.writeStructBegin('NoSuchFile');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HashError = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(HashError, Thrift.TException);
HashError.prototype.name = 'HashError';
HashError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HashError.prototype.write = function(output) {
  output.writeStructBegin('HashError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IllegalOperation = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(IllegalOperation, Thrift.TException);
IllegalOperation.prototype.name = 'IllegalOperation';
IllegalOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IllegalOperation.prototype.write = function(output) {
  output.writeStructBegin('IllegalOperation');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidTransfer = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidTransfer, Thrift.TException);
InvalidTransfer.prototype.name = 'InvalidTransfer';
InvalidTransfer.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidTransfer.prototype.write = function(output) {
  output.writeStructBegin('InvalidTransfer');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InternalError = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InternalError, Thrift.TException);
InternalError.prototype.name = 'InternalError';
InternalError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InternalError.prototype.write = function(output) {
  output.writeStructBegin('InternalError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotPermitted = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NotPermitted, Thrift.TException);
NotPermitted.prototype.name = 'NotPermitted';
NotPermitted.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotPermitted.prototype.write = function(output) {
  output.writeStructBegin('NotPermitted');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidArgument = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidArgument, Thrift.TException);
InvalidArgument.prototype.name = 'InvalidArgument';
InvalidArgument.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidArgument.prototype.write = function(output) {
  output.writeStructBegin('InvalidArgument');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AlreadySet = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(AlreadySet, Thrift.TException);
AlreadySet.prototype.name = 'AlreadySet';
AlreadySet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlreadySet.prototype.write = function(output) {
  output.writeStructBegin('AlreadySet');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchUUID = function(args) {
  this.UUID = null;
  if (args) {
    if (args.UUID !== undefined && args.UUID !== null) {
      this.UUID = args.UUID;
    }
  }
};
Thrift.inherits(NoSuchUUID, Thrift.TException);
NoSuchUUID.prototype.name = 'NoSuchUUID';
NoSuchUUID.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.UUID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchUUID.prototype.write = function(output) {
  output.writeStructBegin('NoSuchUUID');
  if (this.UUID !== null && this.UUID !== undefined) {
    output.writeFieldBegin('UUID', Thrift.Type.STRING, 1);
    output.writeString(this.UUID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthToken = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
AuthToken.prototype = {};
AuthToken.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthToken.prototype.write = function(output) {
  output.writeStructBegin('AuthToken');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DownloadRequest = function(args) {
  this.requestId = null;
  this.file_size = null;
  this.file_hash = null;
  this.block_size = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.file_size !== undefined && args.file_size !== null) {
      this.file_size = args.file_size;
    }
    if (args.file_hash !== undefined && args.file_hash !== null) {
      this.file_hash = args.file_hash;
    }
    if (args.block_size !== undefined && args.block_size !== null) {
      this.block_size = args.block_size;
    }
  }
};
DownloadRequest.prototype = {};
DownloadRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.file_size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.block_size = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DownloadRequest.prototype.write = function(output) {
  output.writeStructBegin('DownloadRequest');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.file_size !== null && this.file_size !== undefined) {
    output.writeFieldBegin('file_size', Thrift.Type.I64, 2);
    output.writeI64(this.file_size);
    output.writeFieldEnd();
  }
  if (this.file_hash !== null && this.file_hash !== undefined) {
    output.writeFieldBegin('file_hash', Thrift.Type.STRING, 3);
    output.writeString(this.file_hash);
    output.writeFieldEnd();
  }
  if (this.block_size !== null && this.block_size !== undefined) {
    output.writeFieldBegin('block_size', Thrift.Type.I32, 4);
    output.writeI32(this.block_size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UploadInfo = function(args) {
  this.packratId = null;
  this.filename = null;
  this.username = null;
  this.is_hex = null;
  this.is_compressed = null;
  this.file_hash = null;
  this.file_size = null;
  this.block_size = null;
  this.comment = null;
  if (args) {
    if (args.packratId !== undefined && args.packratId !== null) {
      this.packratId = args.packratId;
    }
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.is_hex !== undefined && args.is_hex !== null) {
      this.is_hex = args.is_hex;
    }
    if (args.is_compressed !== undefined && args.is_compressed !== null) {
      this.is_compressed = args.is_compressed;
    }
    if (args.file_hash !== undefined && args.file_hash !== null) {
      this.file_hash = args.file_hash;
    }
    if (args.file_size !== undefined && args.file_size !== null) {
      this.file_size = args.file_size;
    }
    if (args.block_size !== undefined && args.block_size !== null) {
      this.block_size = args.block_size;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
UploadInfo.prototype = {};
UploadInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packratId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.is_hex = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.is_compressed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.file_hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.file_size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.block_size = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UploadInfo.prototype.write = function(output) {
  output.writeStructBegin('UploadInfo');
  if (this.packratId !== null && this.packratId !== undefined) {
    output.writeFieldBegin('packratId', Thrift.Type.I32, 1);
    output.writeI32(this.packratId);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 2);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.is_hex !== null && this.is_hex !== undefined) {
    output.writeFieldBegin('is_hex', Thrift.Type.BOOL, 4);
    output.writeBool(this.is_hex);
    output.writeFieldEnd();
  }
  if (this.is_compressed !== null && this.is_compressed !== undefined) {
    output.writeFieldBegin('is_compressed', Thrift.Type.BOOL, 5);
    output.writeBool(this.is_compressed);
    output.writeFieldEnd();
  }
  if (this.file_hash !== null && this.file_hash !== undefined) {
    output.writeFieldBegin('file_hash', Thrift.Type.STRING, 6);
    output.writeString(this.file_hash);
    output.writeFieldEnd();
  }
  if (this.file_size !== null && this.file_size !== undefined) {
    output.writeFieldBegin('file_size', Thrift.Type.I64, 7);
    output.writeI64(this.file_size);
    output.writeFieldEnd();
  }
  if (this.block_size !== null && this.block_size !== undefined) {
    output.writeFieldBegin('block_size', Thrift.Type.I32, 8);
    output.writeI32(this.block_size);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 9);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UploadRequest = function(args) {
  this.requestId = null;
  this.filename = null;
  this.file_hash = null;
  this.block_size = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
    if (args.file_hash !== undefined && args.file_hash !== null) {
      this.file_hash = args.file_hash;
    }
    if (args.block_size !== undefined && args.block_size !== null) {
      this.block_size = args.block_size;
    }
  }
};
UploadRequest.prototype = {};
UploadRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.block_size = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UploadRequest.prototype.write = function(output) {
  output.writeStructBegin('UploadRequest');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 2);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.file_hash !== null && this.file_hash !== undefined) {
    output.writeFieldBegin('file_hash', Thrift.Type.STRING, 3);
    output.writeString(this.file_hash);
    output.writeFieldEnd();
  }
  if (this.block_size !== null && this.block_size !== undefined) {
    output.writeFieldBegin('block_size', Thrift.Type.I32, 4);
    output.writeI32(this.block_size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileInfo = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
FileInfo.prototype = {};
FileInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileInfo.prototype.write = function(output) {
  output.writeStructBegin('FileInfo');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PORT = 9091;
JSON_PORT = 9092;
DEFAULT_BLOCKSIZE = 1024;
INVALID_PACKRAT_ID = 16777215;
API_VERSION = '2.0.15';