//
// Autogenerated by Thrift Compiler (0.15.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

Packrat_ping_args = function(args) {
};
Packrat_ping_args.prototype = {};
Packrat_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_ping_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_ping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Packrat_ping_result.prototype = {};
Packrat_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_ping_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_ping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_get_latest_args = function(args) {
};
Packrat_get_latest_args.prototype = {};
Packrat_get_latest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_get_latest_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_get_latest_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_get_latest_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Packrat_get_latest_result.prototype = {};
Packrat_get_latest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_get_latest_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_get_latest_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_allocate_args = function(args) {
};
Packrat_allocate_args.prototype = {};
Packrat_allocate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_allocate_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_allocate_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_allocate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Packrat_allocate_result.prototype = {};
Packrat_allocate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_allocate_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_allocate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_exists_args = function(args) {
  this.packrat_id = null;
  if (args) {
    if (args.packrat_id !== undefined && args.packrat_id !== null) {
      this.packrat_id = args.packrat_id;
    }
  }
};
Packrat_exists_args.prototype = {};
Packrat_exists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packrat_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_exists_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_exists_args');
  if (this.packrat_id !== null && this.packrat_id !== undefined) {
    output.writeFieldBegin('packrat_id', Thrift.Type.I32, 1);
    output.writeI32(this.packrat_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_exists_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Packrat_exists_result.prototype = {};
Packrat_exists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_exists_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_exists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_get_keywords_args = function(args) {
  this.packrat_id = null;
  if (args) {
    if (args.packrat_id !== undefined && args.packrat_id !== null) {
      this.packrat_id = args.packrat_id;
    }
  }
};
Packrat_get_keywords_args.prototype = {};
Packrat_get_keywords_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packrat_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_get_keywords_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_get_keywords_args');
  if (this.packrat_id !== null && this.packrat_id !== undefined) {
    output.writeFieldBegin('packrat_id', Thrift.Type.I32, 1);
    output.writeI32(this.packrat_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_get_keywords_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Packrat_get_keywords_result.prototype = {};
Packrat_get_keywords_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString().value;
          this.success.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_get_keywords_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_get_keywords_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter4 in this.success) {
      if (this.success.hasOwnProperty(iter4)) {
        iter4 = this.success[iter4];
        output.writeString(iter4);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_login_args = function(args) {
  this.username = null;
  this.password = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
Packrat_login_args.prototype = {};
Packrat_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_login_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_login_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_login_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new AuthToken(args.success);
    }
  }
};
Packrat_login_result.prototype = {};
Packrat_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_login_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_validate_token_args = function(args) {
  this.auth_token = null;
  if (args) {
    if (args.auth_token !== undefined && args.auth_token !== null) {
      this.auth_token = new AuthToken(args.auth_token);
    }
  }
};
Packrat_validate_token_args.prototype = {};
Packrat_validate_token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth_token = new AuthToken();
        this.auth_token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_validate_token_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_validate_token_args');
  if (this.auth_token !== null && this.auth_token !== undefined) {
    output.writeFieldBegin('auth_token', Thrift.Type.STRUCT, 1);
    this.auth_token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_validate_token_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Packrat_validate_token_result.prototype = {};
Packrat_validate_token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_validate_token_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_validate_token_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_logout_args = function(args) {
  this.auth_token = null;
  if (args) {
    if (args.auth_token !== undefined && args.auth_token !== null) {
      this.auth_token = new AuthToken(args.auth_token);
    }
  }
};
Packrat_logout_args.prototype = {};
Packrat_logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth_token = new AuthToken();
        this.auth_token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_logout_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_logout_args');
  if (this.auth_token !== null && this.auth_token !== undefined) {
    output.writeFieldBegin('auth_token', Thrift.Type.STRUCT, 1);
    this.auth_token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_logout_result = function(args) {
};
Packrat_logout_result.prototype = {};
Packrat_logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_logout_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_logout_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_request_download_args = function(args) {
  this.packratId = null;
  this.filename = null;
  this.auth_token = null;
  if (args) {
    if (args.packratId !== undefined && args.packratId !== null) {
      this.packratId = args.packratId;
    }
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
    if (args.auth_token !== undefined && args.auth_token !== null) {
      this.auth_token = new AuthToken(args.auth_token);
    }
  }
};
Packrat_request_download_args.prototype = {};
Packrat_request_download_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packratId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth_token = new AuthToken();
        this.auth_token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_request_download_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_request_download_args');
  if (this.packratId !== null && this.packratId !== undefined) {
    output.writeFieldBegin('packratId', Thrift.Type.I32, 1);
    output.writeI32(this.packratId);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 2);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.auth_token !== null && this.auth_token !== undefined) {
    output.writeFieldBegin('auth_token', Thrift.Type.STRUCT, 3);
    this.auth_token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_request_download_result = function(args) {
  this.success = null;
  this.nsf = null;
  this.np = null;
  this.le = null;
  this.nsp = null;
  this.ie = null;
  this.it = null;
  if (args instanceof NoSuchFile) {
    this.nsf = args;
    return;
  }
  if (args instanceof NotPermitted) {
    this.np = args;
    return;
  }
  if (args instanceof LoginException) {
    this.le = args;
    return;
  }
  if (args instanceof NoSuchPackrat) {
    this.nsp = args;
    return;
  }
  if (args instanceof InternalError) {
    this.ie = args;
    return;
  }
  if (args instanceof InvalidTransfer) {
    this.it = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DownloadRequest(args.success);
    }
    if (args.nsf !== undefined && args.nsf !== null) {
      this.nsf = args.nsf;
    }
    if (args.np !== undefined && args.np !== null) {
      this.np = args.np;
    }
    if (args.le !== undefined && args.le !== null) {
      this.le = args.le;
    }
    if (args.nsp !== undefined && args.nsp !== null) {
      this.nsp = args.nsp;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.it !== undefined && args.it !== null) {
      this.it = args.it;
    }
  }
};
Packrat_request_download_result.prototype = {};
Packrat_request_download_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DownloadRequest();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsf = new NoSuchFile();
        this.nsf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.np = new NotPermitted();
        this.np.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.le = new LoginException();
        this.le.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsp = new NoSuchPackrat();
        this.nsp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new InternalError();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.it = new InvalidTransfer();
        this.it.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_request_download_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_request_download_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nsf !== null && this.nsf !== undefined) {
    output.writeFieldBegin('nsf', Thrift.Type.STRUCT, 1);
    this.nsf.write(output);
    output.writeFieldEnd();
  }
  if (this.np !== null && this.np !== undefined) {
    output.writeFieldBegin('np', Thrift.Type.STRUCT, 2);
    this.np.write(output);
    output.writeFieldEnd();
  }
  if (this.le !== null && this.le !== undefined) {
    output.writeFieldBegin('le', Thrift.Type.STRUCT, 3);
    this.le.write(output);
    output.writeFieldEnd();
  }
  if (this.nsp !== null && this.nsp !== undefined) {
    output.writeFieldBegin('nsp', Thrift.Type.STRUCT, 4);
    this.nsp.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 5);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.it !== null && this.it !== undefined) {
    output.writeFieldBegin('it', Thrift.Type.STRUCT, 6);
    this.it.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_download_file_block_args = function(args) {
  this.requestId = null;
  this.blockNumber = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.blockNumber !== undefined && args.blockNumber !== null) {
      this.blockNumber = args.blockNumber;
    }
  }
};
Packrat_download_file_block_args.prototype = {};
Packrat_download_file_block_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.blockNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_download_file_block_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_download_file_block_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.blockNumber !== null && this.blockNumber !== undefined) {
    output.writeFieldBegin('blockNumber', Thrift.Type.I32, 2);
    output.writeI32(this.blockNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_download_file_block_result = function(args) {
  this.success = null;
  this.it = null;
  if (args instanceof InvalidTransfer) {
    this.it = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.it !== undefined && args.it !== null) {
      this.it = args.it;
    }
  }
};
Packrat_download_file_block_result.prototype = {};
Packrat_download_file_block_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.it = new InvalidTransfer();
        this.it.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_download_file_block_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_download_file_block_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.it !== null && this.it !== undefined) {
    output.writeFieldBegin('it', Thrift.Type.STRUCT, 1);
    this.it.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_next_file_block_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
Packrat_next_file_block_args.prototype = {};
Packrat_next_file_block_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_next_file_block_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_next_file_block_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_next_file_block_result = function(args) {
  this.success = null;
  this.it = null;
  if (args instanceof InvalidTransfer) {
    this.it = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.it !== undefined && args.it !== null) {
      this.it = args.it;
    }
  }
};
Packrat_next_file_block_result.prototype = {};
Packrat_next_file_block_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.it = new InvalidTransfer();
        this.it.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_next_file_block_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_next_file_block_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.it !== null && this.it !== undefined) {
    output.writeFieldBegin('it', Thrift.Type.STRUCT, 1);
    this.it.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_end_download_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
Packrat_end_download_args.prototype = {};
Packrat_end_download_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_end_download_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_end_download_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_end_download_result = function(args) {
};
Packrat_end_download_result.prototype = {};
Packrat_end_download_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_end_download_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_end_download_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_request_upload_args = function(args) {
  this.info = null;
  this.auth_token = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new UploadInfo(args.info);
    }
    if (args.auth_token !== undefined && args.auth_token !== null) {
      this.auth_token = new AuthToken(args.auth_token);
    }
  }
};
Packrat_request_upload_args.prototype = {};
Packrat_request_upload_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new UploadInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth_token = new AuthToken();
        this.auth_token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_request_upload_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_request_upload_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  if (this.auth_token !== null && this.auth_token !== undefined) {
    output.writeFieldBegin('auth_token', Thrift.Type.STRUCT, 2);
    this.auth_token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_request_upload_result = function(args) {
  this.success = null;
  this.nsf = null;
  this.np = null;
  this.le = null;
  this.nsp = null;
  this.ie = null;
  this.it = null;
  if (args instanceof NoSuchFile) {
    this.nsf = args;
    return;
  }
  if (args instanceof NotPermitted) {
    this.np = args;
    return;
  }
  if (args instanceof LoginException) {
    this.le = args;
    return;
  }
  if (args instanceof NoSuchPackrat) {
    this.nsp = args;
    return;
  }
  if (args instanceof InternalError) {
    this.ie = args;
    return;
  }
  if (args instanceof InvalidTransfer) {
    this.it = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UploadRequest(args.success);
    }
    if (args.nsf !== undefined && args.nsf !== null) {
      this.nsf = args.nsf;
    }
    if (args.np !== undefined && args.np !== null) {
      this.np = args.np;
    }
    if (args.le !== undefined && args.le !== null) {
      this.le = args.le;
    }
    if (args.nsp !== undefined && args.nsp !== null) {
      this.nsp = args.nsp;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.it !== undefined && args.it !== null) {
      this.it = args.it;
    }
  }
};
Packrat_request_upload_result.prototype = {};
Packrat_request_upload_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UploadRequest();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsf = new NoSuchFile();
        this.nsf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.np = new NotPermitted();
        this.np.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.le = new LoginException();
        this.le.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsp = new NoSuchPackrat();
        this.nsp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new InternalError();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.it = new InvalidTransfer();
        this.it.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_request_upload_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_request_upload_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nsf !== null && this.nsf !== undefined) {
    output.writeFieldBegin('nsf', Thrift.Type.STRUCT, 1);
    this.nsf.write(output);
    output.writeFieldEnd();
  }
  if (this.np !== null && this.np !== undefined) {
    output.writeFieldBegin('np', Thrift.Type.STRUCT, 2);
    this.np.write(output);
    output.writeFieldEnd();
  }
  if (this.le !== null && this.le !== undefined) {
    output.writeFieldBegin('le', Thrift.Type.STRUCT, 3);
    this.le.write(output);
    output.writeFieldEnd();
  }
  if (this.nsp !== null && this.nsp !== undefined) {
    output.writeFieldBegin('nsp', Thrift.Type.STRUCT, 4);
    this.nsp.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 5);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.it !== null && this.it !== undefined) {
    output.writeFieldBegin('it', Thrift.Type.STRUCT, 6);
    this.it.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_send_file_block_args = function(args) {
  this.requestId = null;
  this.data = null;
  this.block_number = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
    if (args.block_number !== undefined && args.block_number !== null) {
      this.block_number = args.block_number;
    }
  }
};
Packrat_send_file_block_args.prototype = {};
Packrat_send_file_block_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.block_number = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_send_file_block_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_send_file_block_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  if (this.block_number !== null && this.block_number !== undefined) {
    output.writeFieldBegin('block_number', Thrift.Type.I32, 3);
    output.writeI32(this.block_number);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_send_file_block_result = function(args) {
  this.it = null;
  this.ie = null;
  if (args instanceof InvalidTransfer) {
    this.it = args;
    return;
  }
  if (args instanceof InternalError) {
    this.ie = args;
    return;
  }
  if (args) {
    if (args.it !== undefined && args.it !== null) {
      this.it = args.it;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
  }
};
Packrat_send_file_block_result.prototype = {};
Packrat_send_file_block_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.it = new InvalidTransfer();
        this.it.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new InternalError();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_send_file_block_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_send_file_block_result');
  if (this.it !== null && this.it !== undefined) {
    output.writeFieldBegin('it', Thrift.Type.STRUCT, 1);
    this.it.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 2);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_end_upload_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
Packrat_end_upload_args.prototype = {};
Packrat_end_upload_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_end_upload_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_end_upload_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_end_upload_result = function(args) {
  this.it = null;
  this.ie = null;
  if (args instanceof InvalidTransfer) {
    this.it = args;
    return;
  }
  if (args instanceof InternalError) {
    this.ie = args;
    return;
  }
  if (args) {
    if (args.it !== undefined && args.it !== null) {
      this.it = args.it;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
  }
};
Packrat_end_upload_result.prototype = {};
Packrat_end_upload_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.it = new InvalidTransfer();
        this.it.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new InternalError();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_end_upload_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_end_upload_result');
  if (this.it !== null && this.it !== undefined) {
    output.writeFieldBegin('it', Thrift.Type.STRUCT, 1);
    this.it.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 2);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_add_comment_args = function(args) {
  this.packratId = null;
  this.comment = null;
  this.username = null;
  this.auth_token = null;
  if (args) {
    if (args.packratId !== undefined && args.packratId !== null) {
      this.packratId = args.packratId;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.auth_token !== undefined && args.auth_token !== null) {
      this.auth_token = new AuthToken(args.auth_token);
    }
  }
};
Packrat_add_comment_args.prototype = {};
Packrat_add_comment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packratId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth_token = new AuthToken();
        this.auth_token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_add_comment_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_add_comment_args');
  if (this.packratId !== null && this.packratId !== undefined) {
    output.writeFieldBegin('packratId', Thrift.Type.I32, 1);
    output.writeI32(this.packratId);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 2);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.auth_token !== null && this.auth_token !== undefined) {
    output.writeFieldBegin('auth_token', Thrift.Type.STRUCT, 4);
    this.auth_token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_add_comment_result = function(args) {
  this.nsp = null;
  this.le = null;
  this.ie = null;
  if (args instanceof NoSuchPackrat) {
    this.nsp = args;
    return;
  }
  if (args instanceof LoginException) {
    this.le = args;
    return;
  }
  if (args instanceof InternalError) {
    this.ie = args;
    return;
  }
  if (args) {
    if (args.nsp !== undefined && args.nsp !== null) {
      this.nsp = args.nsp;
    }
    if (args.le !== undefined && args.le !== null) {
      this.le = args.le;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
  }
};
Packrat_add_comment_result.prototype = {};
Packrat_add_comment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsp = new NoSuchPackrat();
        this.nsp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.le = new LoginException();
        this.le.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new InternalError();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_add_comment_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_add_comment_result');
  if (this.nsp !== null && this.nsp !== undefined) {
    output.writeFieldBegin('nsp', Thrift.Type.STRUCT, 1);
    this.nsp.write(output);
    output.writeFieldEnd();
  }
  if (this.le !== null && this.le !== undefined) {
    output.writeFieldBegin('le', Thrift.Type.STRUCT, 2);
    this.le.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 3);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_set_qa_status_args = function(args) {
  this.packratId = null;
  this.qa_status = null;
  this.message = null;
  this.username = null;
  if (args) {
    if (args.packratId !== undefined && args.packratId !== null) {
      this.packratId = args.packratId;
    }
    if (args.qa_status !== undefined && args.qa_status !== null) {
      this.qa_status = args.qa_status;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
  }
};
Packrat_set_qa_status_args.prototype = {};
Packrat_set_qa_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packratId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.qa_status = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_set_qa_status_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_set_qa_status_args');
  if (this.packratId !== null && this.packratId !== undefined) {
    output.writeFieldBegin('packratId', Thrift.Type.I32, 1);
    output.writeI32(this.packratId);
    output.writeFieldEnd();
  }
  if (this.qa_status !== null && this.qa_status !== undefined) {
    output.writeFieldBegin('qa_status', Thrift.Type.STRING, 2);
    output.writeString(this.qa_status);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 4);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_set_qa_status_result = function(args) {
  this.nsp = null;
  this.ia = null;
  this.io = null;
  this.ie = null;
  if (args instanceof NoSuchPackrat) {
    this.nsp = args;
    return;
  }
  if (args instanceof InvalidArgument) {
    this.ia = args;
    return;
  }
  if (args instanceof IllegalOperation) {
    this.io = args;
    return;
  }
  if (args instanceof InternalError) {
    this.ie = args;
    return;
  }
  if (args) {
    if (args.nsp !== undefined && args.nsp !== null) {
      this.nsp = args.nsp;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
  }
};
Packrat_set_qa_status_result.prototype = {};
Packrat_set_qa_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsp = new NoSuchPackrat();
        this.nsp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new InvalidArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new IllegalOperation();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new InternalError();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_set_qa_status_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_set_qa_status_result');
  if (this.nsp !== null && this.nsp !== undefined) {
    output.writeFieldBegin('nsp', Thrift.Type.STRUCT, 1);
    this.nsp.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 3);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 4);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_set_uuid_args = function(args) {
  this.packratId = null;
  this.uuid = null;
  if (args) {
    if (args.packratId !== undefined && args.packratId !== null) {
      this.packratId = args.packratId;
    }
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
  }
};
Packrat_set_uuid_args.prototype = {};
Packrat_set_uuid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packratId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_set_uuid_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_set_uuid_args');
  if (this.packratId !== null && this.packratId !== undefined) {
    output.writeFieldBegin('packratId', Thrift.Type.I32, 1);
    output.writeI32(this.packratId);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 2);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_set_uuid_result = function(args) {
  this.nsp = null;
  this.already = null;
  this.ia = null;
  this.ie = null;
  if (args instanceof NoSuchPackrat) {
    this.nsp = args;
    return;
  }
  if (args instanceof AlreadySet) {
    this.already = args;
    return;
  }
  if (args instanceof InvalidArgument) {
    this.ia = args;
    return;
  }
  if (args instanceof InternalError) {
    this.ie = args;
    return;
  }
  if (args) {
    if (args.nsp !== undefined && args.nsp !== null) {
      this.nsp = args.nsp;
    }
    if (args.already !== undefined && args.already !== null) {
      this.already = args.already;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
  }
};
Packrat_set_uuid_result.prototype = {};
Packrat_set_uuid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsp = new NoSuchPackrat();
        this.nsp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.already = new AlreadySet();
        this.already.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new InvalidArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new InternalError();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_set_uuid_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_set_uuid_result');
  if (this.nsp !== null && this.nsp !== undefined) {
    output.writeFieldBegin('nsp', Thrift.Type.STRUCT, 1);
    this.nsp.write(output);
    output.writeFieldEnd();
  }
  if (this.already !== null && this.already !== undefined) {
    output.writeFieldBegin('already', Thrift.Type.STRUCT, 2);
    this.already.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 3);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 4);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_get_attrs_args = function(args) {
  this.packratId = null;
  this.attributes = null;
  if (args) {
    if (args.packratId !== undefined && args.packratId !== null) {
      this.packratId = args.packratId;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyList(args.attributes, [null]);
    }
  }
};
Packrat_get_attrs_args.prototype = {};
Packrat_get_attrs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packratId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.attributes = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readI32().value;
          this.attributes.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_get_attrs_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_get_attrs_args');
  if (this.packratId !== null && this.packratId !== undefined) {
    output.writeFieldBegin('packratId', Thrift.Type.I32, 1);
    output.writeI32(this.packratId);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.attributes.length);
    for (var iter9 in this.attributes) {
      if (this.attributes.hasOwnProperty(iter9)) {
        iter9 = this.attributes[iter9];
        output.writeI32(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_get_attrs_result = function(args) {
  this.success = null;
  this.nsp = null;
  this.ia = null;
  this.ie = null;
  if (args instanceof NoSuchPackrat) {
    this.nsp = args;
    return;
  }
  if (args instanceof InvalidArgument) {
    this.ia = args;
    return;
  }
  if (args instanceof InternalError) {
    this.ie = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.nsp !== undefined && args.nsp !== null) {
      this.nsp = args.nsp;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
  }
};
Packrat_get_attrs_result.prototype = {};
Packrat_get_attrs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp311 = input.readMapBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          if (_i12 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key13 = null;
          var val14 = null;
          key13 = input.readI32().value;
          val14 = input.readString().value;
          this.success[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsp = new NoSuchPackrat();
        this.nsp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new InvalidArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new InternalError();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_get_attrs_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_get_attrs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter15 in this.success) {
      if (this.success.hasOwnProperty(kiter15)) {
        var viter16 = this.success[kiter15];
        output.writeI32(kiter15);
        output.writeString(viter16);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.nsp !== null && this.nsp !== undefined) {
    output.writeFieldBegin('nsp', Thrift.Type.STRUCT, 1);
    this.nsp.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 3);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_set_attrs_args = function(args) {
  this.packratId = null;
  this.new_values = null;
  this.username = null;
  if (args) {
    if (args.packratId !== undefined && args.packratId !== null) {
      this.packratId = args.packratId;
    }
    if (args.new_values !== undefined && args.new_values !== null) {
      this.new_values = Thrift.copyMap(args.new_values, [null]);
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
  }
};
Packrat_set_attrs_args.prototype = {};
Packrat_set_attrs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packratId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.new_values = {};
        var _rtmp318 = input.readMapBegin();
        var _size17 = _rtmp318.size || 0;
        for (var _i19 = 0; _i19 < _size17; ++_i19) {
          if (_i19 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key20 = null;
          var val21 = null;
          key20 = input.readI32().value;
          val21 = input.readString().value;
          this.new_values[key20] = val21;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_set_attrs_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_set_attrs_args');
  if (this.packratId !== null && this.packratId !== undefined) {
    output.writeFieldBegin('packratId', Thrift.Type.I32, 1);
    output.writeI32(this.packratId);
    output.writeFieldEnd();
  }
  if (this.new_values !== null && this.new_values !== undefined) {
    output.writeFieldBegin('new_values', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.new_values));
    for (var kiter22 in this.new_values) {
      if (this.new_values.hasOwnProperty(kiter22)) {
        var viter23 = this.new_values[kiter22];
        output.writeI32(kiter22);
        output.writeString(viter23);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_set_attrs_result = function(args) {
  this.nsp = null;
  this.ia = null;
  this.already = null;
  this.io = null;
  this.ie = null;
  if (args instanceof NoSuchPackrat) {
    this.nsp = args;
    return;
  }
  if (args instanceof InvalidArgument) {
    this.ia = args;
    return;
  }
  if (args instanceof AlreadySet) {
    this.already = args;
    return;
  }
  if (args instanceof IllegalOperation) {
    this.io = args;
    return;
  }
  if (args instanceof InternalError) {
    this.ie = args;
    return;
  }
  if (args) {
    if (args.nsp !== undefined && args.nsp !== null) {
      this.nsp = args.nsp;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
    if (args.already !== undefined && args.already !== null) {
      this.already = args.already;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
  }
};
Packrat_set_attrs_result.prototype = {};
Packrat_set_attrs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsp = new NoSuchPackrat();
        this.nsp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new InvalidArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.already = new AlreadySet();
        this.already.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new IllegalOperation();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new InternalError();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_set_attrs_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_set_attrs_result');
  if (this.nsp !== null && this.nsp !== undefined) {
    output.writeFieldBegin('nsp', Thrift.Type.STRUCT, 1);
    this.nsp.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  if (this.already !== null && this.already !== undefined) {
    output.writeFieldBegin('already', Thrift.Type.STRUCT, 3);
    this.already.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 4);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 5);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_list_files_args = function(args) {
  this.packratId = null;
  if (args) {
    if (args.packratId !== undefined && args.packratId !== null) {
      this.packratId = args.packratId;
    }
  }
};
Packrat_list_files_args.prototype = {};
Packrat_list_files_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packratId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_list_files_args.prototype.write = function(output) {
  output.writeStructBegin('Packrat_list_files_args');
  if (this.packratId !== null && this.packratId !== undefined) {
    output.writeFieldBegin('packratId', Thrift.Type.I32, 1);
    output.writeI32(this.packratId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packrat_list_files_result = function(args) {
  this.success = null;
  this.nsp = null;
  this.ie = null;
  this.nsf = null;
  if (args instanceof NoSuchPackrat) {
    this.nsp = args;
    return;
  }
  if (args instanceof InternalError) {
    this.ie = args;
    return;
  }
  if (args instanceof NoSuchFile) {
    this.nsf = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [FileInfo]);
    }
    if (args.nsp !== undefined && args.nsp !== null) {
      this.nsp = args.nsp;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.nsf !== undefined && args.nsf !== null) {
      this.nsf = args.nsf;
    }
  }
};
Packrat_list_files_result.prototype = {};
Packrat_list_files_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp325 = input.readListBegin();
        var _size24 = _rtmp325.size || 0;
        for (var _i26 = 0; _i26 < _size24; ++_i26) {
          var elem27 = null;
          elem27 = new FileInfo();
          elem27.read(input);
          this.success.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsp = new NoSuchPackrat();
        this.nsp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new InternalError();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsf = new NoSuchFile();
        this.nsf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packrat_list_files_result.prototype.write = function(output) {
  output.writeStructBegin('Packrat_list_files_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter28 in this.success) {
      if (this.success.hasOwnProperty(iter28)) {
        iter28 = this.success[iter28];
        iter28.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nsp !== null && this.nsp !== undefined) {
    output.writeFieldBegin('nsp', Thrift.Type.STRUCT, 1);
    this.nsp.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 2);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.nsf !== null && this.nsf !== undefined) {
    output.writeFieldBegin('nsf', Thrift.Type.STRUCT, 3);
    this.nsf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PackratClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
PackratClient.prototype = {};

PackratClient.prototype.ping = function(callback) {
  this.send_ping(callback); 
  if (!callback) {
    return this.recv_ping();
  }
};

PackratClient.prototype.send_ping = function(callback) {
  var args = new Packrat_ping_args();
  try {
    this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_ping();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ping failed: unknown result';
};

PackratClient.prototype.get_latest = function(callback) {
  this.send_get_latest(callback); 
  if (!callback) {
    return this.recv_get_latest();
  }
};

PackratClient.prototype.send_get_latest = function(callback) {
  var args = new Packrat_get_latest_args();
  try {
    this.output.writeMessageBegin('get_latest', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_get_latest();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_get_latest = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_get_latest_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_latest failed: unknown result';
};

PackratClient.prototype.allocate = function(callback) {
  this.send_allocate(callback); 
  if (!callback) {
    return this.recv_allocate();
  }
};

PackratClient.prototype.send_allocate = function(callback) {
  var args = new Packrat_allocate_args();
  try {
    this.output.writeMessageBegin('allocate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_allocate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_allocate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_allocate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'allocate failed: unknown result';
};

PackratClient.prototype.exists = function(packrat_id, callback) {
  this.send_exists(packrat_id, callback); 
  if (!callback) {
    return this.recv_exists();
  }
};

PackratClient.prototype.send_exists = function(packrat_id, callback) {
  var params = {
    packrat_id: packrat_id
  };
  var args = new Packrat_exists_args(params);
  try {
    this.output.writeMessageBegin('exists', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_exists();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_exists = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_exists_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'exists failed: unknown result';
};

PackratClient.prototype.get_keywords = function(packrat_id, callback) {
  this.send_get_keywords(packrat_id, callback); 
  if (!callback) {
    return this.recv_get_keywords();
  }
};

PackratClient.prototype.send_get_keywords = function(packrat_id, callback) {
  var params = {
    packrat_id: packrat_id
  };
  var args = new Packrat_get_keywords_args(params);
  try {
    this.output.writeMessageBegin('get_keywords', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_get_keywords();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_get_keywords = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_get_keywords_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_keywords failed: unknown result';
};

PackratClient.prototype.login = function(username, password, callback) {
  this.send_login(username, password, callback); 
  if (!callback) {
    return this.recv_login();
  }
};

PackratClient.prototype.send_login = function(username, password, callback) {
  var params = {
    username: username,
    password: password
  };
  var args = new Packrat_login_args(params);
  try {
    this.output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_login();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_login = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_login_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'login failed: unknown result';
};

PackratClient.prototype.validate_token = function(auth_token, callback) {
  this.send_validate_token(auth_token, callback); 
  if (!callback) {
    return this.recv_validate_token();
  }
};

PackratClient.prototype.send_validate_token = function(auth_token, callback) {
  var params = {
    auth_token: auth_token
  };
  var args = new Packrat_validate_token_args(params);
  try {
    this.output.writeMessageBegin('validate_token', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_validate_token();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_validate_token = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_validate_token_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'validate_token failed: unknown result';
};

PackratClient.prototype.logout = function(auth_token, callback) {
  this.send_logout(auth_token, callback); 
};

PackratClient.prototype.send_logout = function(auth_token, callback) {
  var params = {
    auth_token: auth_token
  };
  var args = new Packrat_logout_args(params);
  try {
    this.output.writeMessageBegin('logout', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.request_download = function(packratId, filename, auth_token, callback) {
  this.send_request_download(packratId, filename, auth_token, callback); 
  if (!callback) {
    return this.recv_request_download();
  }
};

PackratClient.prototype.send_request_download = function(packratId, filename, auth_token, callback) {
  var params = {
    packratId: packratId,
    filename: filename,
    auth_token: auth_token
  };
  var args = new Packrat_request_download_args(params);
  try {
    this.output.writeMessageBegin('request_download', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_request_download();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_request_download = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_request_download_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.nsf) {
    throw result.nsf;
  }
  if (null !== result.np) {
    throw result.np;
  }
  if (null !== result.le) {
    throw result.le;
  }
  if (null !== result.nsp) {
    throw result.nsp;
  }
  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.it) {
    throw result.it;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'request_download failed: unknown result';
};

PackratClient.prototype.download_file_block = function(requestId, blockNumber, callback) {
  this.send_download_file_block(requestId, blockNumber, callback); 
  if (!callback) {
    return this.recv_download_file_block();
  }
};

PackratClient.prototype.send_download_file_block = function(requestId, blockNumber, callback) {
  var params = {
    requestId: requestId,
    blockNumber: blockNumber
  };
  var args = new Packrat_download_file_block_args(params);
  try {
    this.output.writeMessageBegin('download_file_block', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_download_file_block();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_download_file_block = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_download_file_block_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.it) {
    throw result.it;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'download_file_block failed: unknown result';
};

PackratClient.prototype.next_file_block = function(requestId, callback) {
  this.send_next_file_block(requestId, callback); 
  if (!callback) {
    return this.recv_next_file_block();
  }
};

PackratClient.prototype.send_next_file_block = function(requestId, callback) {
  var params = {
    requestId: requestId
  };
  var args = new Packrat_next_file_block_args(params);
  try {
    this.output.writeMessageBegin('next_file_block', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_next_file_block();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_next_file_block = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_next_file_block_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.it) {
    throw result.it;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'next_file_block failed: unknown result';
};

PackratClient.prototype.end_download = function(requestId, callback) {
  this.send_end_download(requestId, callback); 
};

PackratClient.prototype.send_end_download = function(requestId, callback) {
  var params = {
    requestId: requestId
  };
  var args = new Packrat_end_download_args(params);
  try {
    this.output.writeMessageBegin('end_download', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.request_upload = function(info, auth_token, callback) {
  this.send_request_upload(info, auth_token, callback); 
  if (!callback) {
    return this.recv_request_upload();
  }
};

PackratClient.prototype.send_request_upload = function(info, auth_token, callback) {
  var params = {
    info: info,
    auth_token: auth_token
  };
  var args = new Packrat_request_upload_args(params);
  try {
    this.output.writeMessageBegin('request_upload', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_request_upload();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_request_upload = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_request_upload_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.nsf) {
    throw result.nsf;
  }
  if (null !== result.np) {
    throw result.np;
  }
  if (null !== result.le) {
    throw result.le;
  }
  if (null !== result.nsp) {
    throw result.nsp;
  }
  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.it) {
    throw result.it;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'request_upload failed: unknown result';
};

PackratClient.prototype.send_file_block = function(requestId, data, block_number, callback) {
  this.send_send_file_block(requestId, data, block_number, callback); 
  if (!callback) {
  this.recv_send_file_block();
  }
};

PackratClient.prototype.send_send_file_block = function(requestId, data, block_number, callback) {
  var params = {
    requestId: requestId,
    data: data,
    block_number: block_number
  };
  var args = new Packrat_send_file_block_args(params);
  try {
    this.output.writeMessageBegin('send_file_block', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_send_file_block();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_send_file_block = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_send_file_block_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.it) {
    throw result.it;
  }
  if (null !== result.ie) {
    throw result.ie;
  }
  return;
};

PackratClient.prototype.end_upload = function(requestId, callback) {
  this.send_end_upload(requestId, callback); 
  if (!callback) {
  this.recv_end_upload();
  }
};

PackratClient.prototype.send_end_upload = function(requestId, callback) {
  var params = {
    requestId: requestId
  };
  var args = new Packrat_end_upload_args(params);
  try {
    this.output.writeMessageBegin('end_upload', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_end_upload();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_end_upload = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_end_upload_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.it) {
    throw result.it;
  }
  if (null !== result.ie) {
    throw result.ie;
  }
  return;
};

PackratClient.prototype.add_comment = function(packratId, comment, username, auth_token, callback) {
  this.send_add_comment(packratId, comment, username, auth_token, callback); 
  if (!callback) {
  this.recv_add_comment();
  }
};

PackratClient.prototype.send_add_comment = function(packratId, comment, username, auth_token, callback) {
  var params = {
    packratId: packratId,
    comment: comment,
    username: username,
    auth_token: auth_token
  };
  var args = new Packrat_add_comment_args(params);
  try {
    this.output.writeMessageBegin('add_comment', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_add_comment();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_add_comment = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_add_comment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.nsp) {
    throw result.nsp;
  }
  if (null !== result.le) {
    throw result.le;
  }
  if (null !== result.ie) {
    throw result.ie;
  }
  return;
};

PackratClient.prototype.set_qa_status = function(packratId, qa_status, message, username, callback) {
  this.send_set_qa_status(packratId, qa_status, message, username, callback); 
  if (!callback) {
  this.recv_set_qa_status();
  }
};

PackratClient.prototype.send_set_qa_status = function(packratId, qa_status, message, username, callback) {
  var params = {
    packratId: packratId,
    qa_status: qa_status,
    message: message,
    username: username
  };
  var args = new Packrat_set_qa_status_args(params);
  try {
    this.output.writeMessageBegin('set_qa_status', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_set_qa_status();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_set_qa_status = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_set_qa_status_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.nsp) {
    throw result.nsp;
  }
  if (null !== result.ia) {
    throw result.ia;
  }
  if (null !== result.io) {
    throw result.io;
  }
  if (null !== result.ie) {
    throw result.ie;
  }
  return;
};

PackratClient.prototype.set_uuid = function(packratId, uuid, callback) {
  this.send_set_uuid(packratId, uuid, callback); 
  if (!callback) {
  this.recv_set_uuid();
  }
};

PackratClient.prototype.send_set_uuid = function(packratId, uuid, callback) {
  var params = {
    packratId: packratId,
    uuid: uuid
  };
  var args = new Packrat_set_uuid_args(params);
  try {
    this.output.writeMessageBegin('set_uuid', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_set_uuid();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_set_uuid = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_set_uuid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.nsp) {
    throw result.nsp;
  }
  if (null !== result.already) {
    throw result.already;
  }
  if (null !== result.ia) {
    throw result.ia;
  }
  if (null !== result.ie) {
    throw result.ie;
  }
  return;
};

PackratClient.prototype.get_attrs = function(packratId, attributes, callback) {
  this.send_get_attrs(packratId, attributes, callback); 
  if (!callback) {
    return this.recv_get_attrs();
  }
};

PackratClient.prototype.send_get_attrs = function(packratId, attributes, callback) {
  var params = {
    packratId: packratId,
    attributes: attributes
  };
  var args = new Packrat_get_attrs_args(params);
  try {
    this.output.writeMessageBegin('get_attrs', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_get_attrs();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_get_attrs = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_get_attrs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.nsp) {
    throw result.nsp;
  }
  if (null !== result.ia) {
    throw result.ia;
  }
  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_attrs failed: unknown result';
};

PackratClient.prototype.set_attrs = function(packratId, new_values, username, callback) {
  this.send_set_attrs(packratId, new_values, username, callback); 
  if (!callback) {
  this.recv_set_attrs();
  }
};

PackratClient.prototype.send_set_attrs = function(packratId, new_values, username, callback) {
  var params = {
    packratId: packratId,
    new_values: new_values,
    username: username
  };
  var args = new Packrat_set_attrs_args(params);
  try {
    this.output.writeMessageBegin('set_attrs', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_set_attrs();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_set_attrs = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_set_attrs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.nsp) {
    throw result.nsp;
  }
  if (null !== result.ia) {
    throw result.ia;
  }
  if (null !== result.already) {
    throw result.already;
  }
  if (null !== result.io) {
    throw result.io;
  }
  if (null !== result.ie) {
    throw result.ie;
  }
  return;
};

PackratClient.prototype.list_files = function(packratId, callback) {
  this.send_list_files(packratId, callback); 
  if (!callback) {
    return this.recv_list_files();
  }
};

PackratClient.prototype.send_list_files = function(packratId, callback) {
  var params = {
    packratId: packratId
  };
  var args = new Packrat_list_files_args(params);
  try {
    this.output.writeMessageBegin('list_files', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_list_files();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PackratClient.prototype.recv_list_files = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Packrat_list_files_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.nsp) {
    throw result.nsp;
  }
  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.nsf) {
    throw result.nsf;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'list_files failed: unknown result';
};